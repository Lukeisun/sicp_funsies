#lang sicp
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define (is-leaf? t)
  (if (pair? t)
      (+ (count-leaves (car t))
         (count-leaves (cdr t)))
      1))
(define (count-leaves t)
  (accumulate + 0 (map is-leaf? t)))
(define x (cons (list 1 2) (list 3 4)))
(count-leaves (list x x))
