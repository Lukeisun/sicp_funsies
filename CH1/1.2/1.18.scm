#lang sicp
(define (double x) (* 2 x))
(define (halve x) (/ x 2))
(define (even? x) (= (remainder x 2) 0))
(define (fast-mult b n)
  (cond ((= n 0) 0)
        ((even? n) (double (fast-mult b (halve n))))
        (else (+ b (fast-mult b (- n 1))))))
(define (iter-mult a b n)
  (cond ((= n 0) a)
        ((even? n) (iter-mult a (double b) (halve n)))
        (else (iter-mult (+ a b) b (- n 1)))))
(let ((s (runtime)))
  (fast-mult 5 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
  (- (runtime) s))
(let ((s (runtime)))
  (iter-mult 0 5 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
  (- (runtime) s))
