#lang sicp
;; (define (timed-prime-test n)
;;   (newline)
;;   (display n)
;;   (start-prime-test n (runtime))
;; (define (start-prime-test n start-time)
;;   (if (prime? n)
;;     (report-prime (- (runtime) start-time)))
;; (define (report-prime elapsed-time)
;;   (display " *** ")
;;   (display elapsed-time))
;; (define (prime? n)
(define (square x)
  (* x x))
(define (even? x)
  (= (remainder x 2) 0))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fermat-no-rand n a)
  (= (expmod a n n) a))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (prime? n a)
  (cond ((= n a) true)
        ((fermat-no-rand n a) (prime? n (+ a 1)))
        (else false)))

(define (emod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))

(define (mrt-test n a)
  (= (emod a (- n 1) n) (remainder 1 n)))
(define (mrt-prime? n a)
  (cond ((= n a) true)
        ((mrt-test n a) (mrt-prime? n (+ a 1)))
        (else false)))
;; (fast-prime? 199 5)
;; (fast-prime? 561 561)
;; (prime? 561 561)
(prime? 199 0)
(prime? 561 0)
(prime? 1105 0)
(prime? 1729 0)
(prime? 7 0)
(prime? 10 0)
(prime? 500 0)
