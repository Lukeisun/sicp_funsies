#lang sicp
(#%require racket/trace)
(define (cont-frac n d k)
  (define (frac i)
    (if (= i k)
        (/ (n) (d))
        (+ (d) (/ (n) (frac (+ i 1))))))
  (trace frac)
  (/ (n) (frac 0))
  )
(define (cont-frac-iter n d k)
  (define (frac i acc)
    (if (= i k)
        acc
        (frac (+ i 1) (+ (d) (/ (n) acc)))))
  (trace frac)
  (/ 1 (frac 0 1))
  )
(cont-frac (lambda () 1.0)
           (lambda () 1.0)
           20)
(cont-frac-iter (lambda () 1.0)
                (lambda () 1.0)
                20)

